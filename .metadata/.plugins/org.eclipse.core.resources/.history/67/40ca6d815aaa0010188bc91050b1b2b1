package com.kedu.test.members;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


@Service
public class MemberService {
	@Autowired
	private MemberDAO dao;
	
	// James 메일 계정 생성을 전담할 MailAccountService를 주입받습니다.
		@Autowired
		private MailAccountService mailAccountService;
		
		/**
		 * 회원가입과 동시에 James 메일 서버에 계정을 생성합니다.
		 * @param dto 사용자가 입력한 원본 정보가 담긴 DTO
		 * @return DB에 저장된 row 수
		 */
		@Transactional // 두 시스템(우리 DB, James 서버)에 대한 작업을 한 묶음으로 보장합니다.
		public int signup(MemberDTO dto) {
		    
		    // --- 1단계: '사내 우편실'에 사서함 신청 (James 서버 계정 생성) ---
	        // 비밀번호를 암호화하기 "전", 원본 비밀번호를 사용하여 James 서버에 계정을 먼저 생성합니다.
	        boolean isMailAccountCreated = mailAccountService.createMailAccount(
	            dto.getEmail(),
	            dto.getPw() // ★★★ 바로 이 순간! 암호화되지 않은 원본 비밀번호를 사용합니다 ★★★
	        );

	        // 메일 계정 생성이 실패하면, 회원가입 전체를 중단하고 롤백(취소)합니다.
	        if (!isMailAccountCreated) {
	            // 실제 운영 코드에서는 더 구체적인 예외 처리를 하는 것이 좋습니다.
	            throw new RuntimeException("메일 서버에 계정을 생성하는 데 실패했습니다. 회원가입이 중단됩니다.");
	        }
		    
		    // --- 2단계: '회사 인사 DB'에 암호화된 정보로 저장 ---
			// James 계정 생성이 성공한 후에만, 그룹웨어 DB에 저장할 비밀번호를 암호화합니다.
			dto.setPw(Encryptor.encrypt(dto.getPw())); // 암호화
			
			// 암호화된 비밀번호가 담긴 DTO를 DB에 저장합니다.
			return dao.signup(dto);
		}
	
	// 로그인
	public int login(MemberDTO dto) {
		dto.setPw(Encryptor.encrypt(dto.getPw())); // 암호화
		return dao.login(dto);
	}
	
	// 비밀번호찾기(초반 이메일인증)
	public int findpw(MemberDTO dto) {
		return dao.findpw(dto);
	}
}
